{"version":3,"sources":["App.module.css","components/Lists.module.css","components/Cards.module.css","components/Cards.js","actions/ListsAction.js","actions/CardsAction.js","actions/index.js","components/ActionButton.js","components/Lists.js","App.js","serviceWorker.js","reducers/ListsReducers.js","reducers/index.js","store/index.js","index.js"],"names":["module","exports","card","props","className","styles","structure","text","status","addList","title","type","CONSTANTS","ADD_LIST","payload","addCard","ListID","ADD_CARD","actionButton","state","formOpen","openForm","setState","closeForm","handleAddList","dispatch","handleAddCard","onChangeHandler","e","target","value","renderAddButton","btnText","list","onClick","style","borderRadius","display","allignItem","cursor","padding","border","overflow","renderForm","placeholder","btnTitle","onBlur","onChange","width","height","varient","onMouseDown","color","backgroundColor","this","React","Component","connect","cards","container","map","Cards","key","id","ActionButton","App","lists","ListContainer","Lists","Boolean","window","location","hostname","match","CardID","initialState","listsReducer","action","newList","newCard","newState","combineReducers","store","createStore","rootReducer","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4113418e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ListContainer\":\"App_ListContainer__2xPRE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Lists_container__1a_I8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"structure\":\"Cards_structure__2lGZ-\"};","import React from \"react\";\r\nimport styles from \"./Cards.module.css\";\r\n\r\nconst card = props => {\r\n  return (\r\n    <div className={styles.structure}>\r\n      <p>{props.text}</p>\r\n      <p>{props.status}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default card;\r\n","import { CONSTANTS} from \"../actions\"\r\n\r\nexport const addList = title => {\r\n  return {\r\n    type:CONSTANTS.ADD_LIST ,\r\n    payload: title\r\n  };\r\n};\r\n","import {CONSTANTS} from \"../actions\"\r\n\r\nexport const addCard=(ListID,text)=>{\r\n  return{\r\n    type:CONSTANTS.ADD_CARD,\r\n    payload: {text,ListID}\r\n  }\r\n}\r\n","export * from './ListsAction'\r\nexport * from './CardsAction'\r\n\r\nexport const CONSTANTS = {\r\n  ADD_CARD: \"ADD_CARD\",\r\n  ADD_LIST: \"ADD_LIST\"\r\n};\r\n","import React from \"react\";\r\nimport {connect } from 'react-redux'\r\nimport { addList,addCard } from \"../actions\"\r\n\r\nclass actionButton extends React.Component {\r\n  state = {\r\n    formOpen: false,\r\n    text: \"\"\r\n  };\r\n\r\n  openForm = () => {\r\n    this.setState({ formOpen: true });\r\n  };\r\n\r\n  closeForm = () => {\r\n    this.setState({ formOpen: false });\r\n  };\r\n\r\n  handleAddList=()=>{\r\n    const {dispatch}=this.props\r\n    const {text}=this.state\r\n    if(text){\r\n      this.setState({\r\n        text:\"\"\r\n      })\r\n      dispatch(addList(text))\r\n    }\r\n    return\r\n  }\r\n  handleAddCard=()=>{\r\n    const {dispatch,ListID}=this.props;\r\n    const {text}=this.state\r\n    if(text){\r\n      this.setState({\r\n        text:\"\"\r\n      })\r\n      dispatch(addCard(ListID,text))\r\n    }\r\n  }\r\n\r\n  onChangeHandler = e => {\r\n    this.setState({ text: e.target.value });\r\n  };\r\n  renderAddButton = () => {\r\n    const { list } = this.props;\r\n    const btnText = list ? \"Add another List\" : \"Add another Card\";\r\n    return (\r\n      <div onClick={this.openForm}>\r\n        <button\r\n          style={{\r\n            borderRadius: \"44px\",\r\n            display: \"flex\",\r\n            allignItem: \"center\",\r\n            cursor: \"pointer\",\r\n            padding: \"10\",\r\n            border: \"none\",\r\n            overflow: \"hidden\"\r\n          }}\r\n        >\r\n          {btnText}\r\n        </button>\r\n      </div>\r\n    );\r\n  };\r\n  renderForm = () => {\r\n    const { list } = this.props;\r\n    const placeholder = list ? \"Add List title\" : \"Add Card detail\";\r\n    const btnTitle = list ? \"Add List\" : \"Add Card\";\r\n    return (\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          placeholder={placeholder}\r\n          onBlur={this.closeForm}\r\n          value={this.state.text}\r\n          onChange={this.onChangeHandler}\r\n          style={{ width: \"100%\", height: \"60px\" }}\r\n        />\r\n\r\n        <div>\r\n          <button\r\n            varient=\"contained\"\r\n            onMouseDown={list?this.handleAddList:this.handleAddCard}\r\n            style={{ color: \"white\", backgroundColor: \"#5aac44\" }}\r\n          >\r\n            {btnTitle}\r\n          </button>\r\n          <button\r\n            varient=\"contained\"\r\n            onClick={this.closeForm}\r\n            style={{ color: \"white\", backgroundColor: \"red\" }}\r\n          >\r\n            Cancel\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return this.state.formOpen ? this.renderForm() : this.renderAddButton();\r\n  }\r\n}\r\nexport default connect()(actionButton);\r\n","import React from \"react\";\r\nimport styles from \"./Lists.module.css\";\r\nimport Cards from \"./Cards\";\r\nimport ActionButton from \"./ActionButton\";\r\n\r\nconst list = props => {\r\n  const { cards } = props;\r\n  return (\r\n    <div className={styles.container}>\r\n      <h1>{props.title}</h1>\r\n      {cards.map(card => (\r\n        <Cards key={card.id} text={card.text} />\r\n      ))}\r\n      <ActionButton card ListID={props.ListID}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default list;\r\n","import React, { Component } from \"react\";\nimport styles from \"./App.module.css\";\nimport Lists from \"./components/Lists\";\nimport { connect } from \"react-redux\";\nimport ActionButton from './components/ActionButton'\n\nclass App extends Component {\n  render() {\n    const {lists}=this.props;\n    return (\n      <div>\n      <div className={styles.ListContainer}>\n        {lists.map(list=><Lists ListID={list.id} key={list.id} title={list.title} cards={list.cards}></Lists>)}\n        <ActionButton list/>\n      </div>\n\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  lists: state.lists\n});\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { CONSTANTS } from \"../actions\";\r\n\r\nlet ListID = 2;\r\nlet CardID = 4;\r\n\r\nconst initialState = [\r\n  {\r\n    title: \"Sample 1\",\r\n    id: 0,\r\n    cards: [\r\n      {\r\n        id: 0,\r\n        text: \"sample text1\",\r\n        status: \"pending\"\r\n      },\r\n      {\r\n        id: 1,\r\n        text: \"sample text2\",\r\n        status: \"pending\"\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\nconst listsReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case CONSTANTS.ADD_LIST:\r\n      const newList = {\r\n        title: action.payload,\r\n        cards: [],\r\n        id: ListID\r\n      };\r\n      ListID += 1;\r\n      return [...state, newList];\r\n\r\n    case CONSTANTS.ADD_CARD:\r\n      const newCard = {\r\n        text: action.payload.text,\r\n        id: CardID\r\n      };\r\n      CardID += 1;\r\n\r\n      const newState = state.map(list => {\r\n        if (list.id === action.payload.ListID) {\r\n          return {\r\n            ...list,\r\n            cards: [...list.cards, newCard]\r\n          };\r\n        } else {\r\n          return list;\r\n        }\r\n      });\r\n      return newState;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default listsReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport listsReducer from \"./ListsReducers.js\";\r\n\r\nexport default combineReducers({ lists: listsReducer });\r\n","import { createStore } from \"redux\";\r\nimport rootReducer from \"../reducers\"\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport {Provider} from \"react-redux\";\nimport store from \"./store\"\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}